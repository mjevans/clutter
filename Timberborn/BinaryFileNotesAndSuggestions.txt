/*

Thoughts about a binary Timberborn save format (specific, any game generic) and some library notes for a possible C level converter (so that ancient JSON level support doesn't need to be maintained).

Copyright - Not Applicable 2021 - mjevans : These thoughts SHOULD be OBVIOUS to anyone skilled in the art / science.  If law prevents the denial of copyright, I release these notes and ideas simultaneously under CC0, MIT, LGPL or GPL (for both: any version in perpetuity, newer, older, etc).
 * https://creativecommons.org/share-your-work/public-domain/cc0/
 * https://opensource.org/licenses/MIT
 * https://www.gnu.org/licenses/licenses.html

 Please :FIXME:
 
 Format oddities / incompatibilities ("GameVersion" : "v20211008-31c08af-sw")
  - some floats are emitted oddly, E.G. {"Rotation":{"X":-.,"Y":-.,"Z":-.,"W":1.0}} << This faults even more lax parsers.
    // sed -i 's/:-./:0.0/g' # store as 0.0 not -.
  - STUPIDLY long lines, mostly caused by no newlines ever, serializing 'image' like blob maps as single strings, emit a newline after each object would be best / easy?
  
 Review of the largest blobs and sections in the current JSON files.
  
  "Entities" is a _large_ array of many different entities on the map, each of which follows a different template.
  - Base entity values could greatly benefit from representation in a fixed binary (stored struct) format. This is contrasted by the variability of subkeys which are all optional.
  - Very common entities might be factored out to binary lists.  E.G. Trees (Birch, Pine, Maple AKA 'log'), Berries, Crops (Carrot, Potatoes, Wheat), Path, Levee, continue to look for low hanging fruit.
  - Sort by entity type to improve compression by localizing similar subkey names (smooth entropy changes)
  - Possibly just factor all of the required elements together...
    - Before: 218 len
    {"Components":{"BlockObject":{"Coordinates":{"X":41,"Y":40,"Z":4}},"Constructible":{"Finished":true},"ConstructionSite":{"BuildTimeProgressInHoursKey":1}},"Id":"8622d7cb-7ca5-4b29-bb90-d019285ce61f","Template":"Slope"}
    - After: 160 len implicit Blockobject(X,Y,Z),Id,Template,{... array of extra object data ...}
    {41,40,4,"8622d7cb-7ca5-4b29-bb90-d019285ce61f","Slope",{"Components":{"Constructible":{"Finished":true},"ConstructionSite":{"BuildTimeProgressInHoursKey":1}}}}
  ALL the tile arrays should be stored as binary blobs in 'raw' arrays
    - To improve compression planes and rectangles made by players should be more likely to clump together, similar to images in a video codec. (power of 2)
      -  16 = 4x4   probably too small to improve compression, but might be considered
      -  64 = 8x8   gut feeling this is likely to be the sweet spot for the maps I've seen
      - 256 = 16x16 probably too large to yield gains over just line-scanning the map
    - MapSize should be stored in the (compressed?) header, before the arrays, it provides an implicit size for the arrays and reduces data duplication
      - Are non power of 2 sizes supported or desired in the future?
      - It's still reasonable to store as 2 x 32-bit numbers to be future proof? Everywhere?
      - 'TerrainHeights' appears to have a very small, positive, integer range.
        - It's fine to store it as either uint8 or sint8.
        - If the range is required to be 0-15 inclusive packed nibbles might be worth the bit shifts for really large maps.
      - 'SoilMoistureSimulator' looks like a single precision float array
      - 'WaterDepths' looks like a a singleprecision float array
      - 'Outflows' 4 cardinal directions per tile, still looks like a (4x larger) a single precision float array
        - This should still use the same 'base' tile group size from the other maps
        - That would also help if it matches the in-game representation of the world.
      - 'PlantingMap' s
        - shouldn't re-store the game's map size
        - SHOULD be a bitfield / bit vector; one of the other reasons to use a 64 (8x8) square is a 64 bit word would also match that bitfield nicely, let the compilers figure out how to optimally index.
  - Some areas use double precision floats (8 bytes) where single precision would readily be sufficient... E.G. offset of an object or rotation.
        
  A great deal of the non-entity structure that isn't a 'tile blob' could be stored flattened among a typed series of key:value entries, though implementing that is likely very low priority, adding some reserved space for it seems like a good idea at the time.  At runtime they're probably stored in a hash/map/dict anyway, so sorting in the file (nor during serialization) is required.

  
  Proposed binary format:
  (Also see https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md )

  Instead of a magic number, a human recognizable (self-documenting) raw byte array replaces the 'magic number' and provides data for file and similar magic fingerprint databases. https://manpages.ubuntu.com/manpages/focal/en/man1/file.1.html https://manpages.ubuntu.com/manpages/focal/en/man5/magic.5.html
  
 Header structures / types:
 
 struct PBstring { // Pascal byte-length prefixed string
    uint8_t len;
    char[] str;  // C99+ // optional null (must include in len)
 }
 struct OffsetIndex {
    struct PBstring *name; // pointers are serialized to disk in sequence
    ptrdiff_t offset;
 }
 
// Considering how frequently this is used for objects, smaller is probably better.  Unsigned 8 bits supports the current map sizes, Unsigned 16 bits could be future-proof overkill, or wait for a file version bump. 
#DEFINE mapsize_t uint8_t
  
  
11 bytes - 'Timberborn'
 5 bytes - Padding / Optional : 40 bits of flags / reserved fields
 8 bytes - A full 64 bit signed timestamp based on unix epoch, converted to UTC timezone if possible.  This seems sufficiently overkill and easy to implement, plus it sorts nicely. https://en.wikipedia.org/wiki/Year_2038_problem#Possible_solutions
 * bytes - Any other out of compressed segment (preview friendly) data with fixed lengths and offsets
 ...
 * zstd or other compressed stream wrapper, please enable size and checksum validation
 struct CompressedSave {
    uint32_t OffsetCount; // Help terminate scanning.  Prospective SERIAL for format version (data types are never removed or number is still unique).  Why more than 255, 65535? 255 seems risky low for mods and general future proof. ~64K / 32K is probably overkill, but why not be sure; just like with the map size.  If map size are 16bit 64K for offsets also seems reasonable (but then 16+16+32 packs to a 64 word nicely also).
    struct OffsetIndex Offsets[] // arrays / pointers are serialized to disk in sequence.
    mapsize_t MapSizeX;
    mapsize_t MapSizeY;
    // It'll be easier to use the offset within the decompressed stream / buffer
    // MIN CurrentOffsetSegment = 2 + (NumOffsets) * (1 + sizeof(ptrdiff_t)) + length(concat(OffsetNames[]))
    // Round up to next word alignment, possibly page alignment, should improve parse performance with aligned accesses.
    //
    // OffsetIndex('TerrainHeights', CurrentOffsetSegment)
    // OffsetIndex('SoilMoistureSimulator', fixme)
    // OffsetIndex('WaterDepths', fixme)
    // OffsetIndex('Outflows', fixme)
    // OffsetIndex('Felling...', fixme) // Cut trees where? just like the planting map.
    // OffsetIndex('PlantingCarrots', fixme)
    // OffsetIndex('PlantingTaters', fixme)
    // OffsetIndex('PlantingWheat', fixme)
    // OffsetIndex('Planting...', fixme)
    // OffsetIndex('JSON', fixme) // anything stored in the JSON blob
    // Offset for lists of: Trees (Birch, Pine, Maple AKA 'log'), Berries, Crops (Carrot, Potatoes, Wheat)
    // OffsetIndex('Birch', fixme) ArrTree
    // OffsetIndex('Pine', fixme) ArrTree
    // OffsetIndex('Maple', fixme) ArrTree
    // OffsetIndex('Berries', fixme) ArrGrowable
    // OffsetIndex('Carrots', fixme) ArrGrowable
    // OffsetIndex('Potatoes', fixme) ArrGrowable
    // OffsetIndex('Wheat', fixme) ArrGrowable
    // OffsetIndex('Path', fixme) // FinishedSimpleObject -- Only fully FINISHED or Newly Placed (no work, no items) objects; in progress should be an old style JSON Entities, like complex buildings.
    // OffsetIndex('Levee', fixme) // FinishedSimpleObject -- Only fully FINISHED or Newly Placed (no work, no items) objects; in progress should be an old style JSON Entities, like complex buildings.
    // OffsetIndex('...', fixme) // FinishedSimpleObject -- Only fully FINISHED or Newly Placed (no work, no items) objects; in progress should be an old style JSON Entities, like complex buildings.
    // OffsetIndex('KVint32', fixme) // signed int32 - Extension suggestion for consideration
    // OffsetIndex('KVint64', fixme) // signed int64 - Extension suggestion for consideration
    // OffsetIndex('KVfloat', fixme) // single precision floats - Extension suggestion for consideration
    // OffsetIndex('KVdouble', fixme) // double precision floats - Extension suggestion for consideration
    // OffsetIndex('KVstr8', fixme) // PBstring8 - Extension suggestion for consideration
    // OffsetIndex('KVstr32', fixme) // PBstring32 - Extension suggestion for consideration
    // why not PBstring16? The vast majority of strings were very short (or keys, but also short).  Any that were large were VERY large.  Such as the whole file JSON blob (or the arrays that were already broken out above).
 }
 
 // Traversal / iteration can use 1 + (first byte of a structure) + sizeof(val) to find the next starting offset.
 
 struct KVint32 {
     struct PBstring *name;
     int32_t val; // signed integer 32 bit
 }
 struct KVint64 {
     struct PBstring *name;
     int64_t val; // signed integer 64 bit
 }
 struct KVsingle {
     struct PBstring *name;
     double val; // single precision float (4 bytes)
 }
 struct KVdouble {
     struct PBstring *name;
     double val; // double precision float (8 bytes)
 }
 
 // Traversal is two step
 
 struct KVstr8 {
     struct PBstring *name;
     struct PBstring *val; // optional null (must include in len)
 }
 struct KVint64 {
     struct PBstring *name;
     uint32_t len;
     char val[]; // C99+ terminated by len above, optional null (must include in len)
 }
 
 struct ArrTree {
     mapsize_t x;
     mapsize_t y;
     uint8_t z;
     float xoff;
     float yoff;
     float growth;
     float nrmrDia;
     float nrmrHeight;
     float nrmrRotation;
     float GrowthProgress;
     float DyingProgress;
     uint8_t IsDead:1, IsDry:1; // bitfield as flags
     // uint8_t YieldAmount : 6; // This is static per tree type? Implicit therefore do not include
     uint8_t uuid[16];
 }

 struct ArrGrowable {
     mapsize_t x;
     mapsize_t y;
     uint8_t z;
     float xoff;
     float yoff;
     float growth; // Why do berries have growth under Growable and GatherableYieldGrower ?
     float nrmrDia;
     float nrmrHeight;
     float nrmrRotation;
     float GrowthProgress;
     float DyingProgress;
     uint8_t IsDead:1, IsDry:1, IsGrown:1, IsGatherable:1; // bitfield as flags
     // uint8_t YieldAmount : 4; // This is static per tree type? Implicit therefore do not include
     uint8_t uuid[16];
 }

 struct ArrFinishedSimpleObject { // If this is finished all the construction site stuff should be discarded... why is this still in the save files?
     mapsize_t x;
     mapsize_t y;
     uint8_t z;
     uint8_t CardinalRotation:2, Finished:1, Priority:3; // Only fully FINISHED or Newly Placed (no work, no items) objects; in progress should be an old style JSON Entities, like complex buildings.
     uint8_t uuid[16];
 }

 // C because simple and portable
 // JSON
 // - considered 5 of the libraries listed on https://www.json.org/json-en.html
 //   - https://github.com/cesanta/mjson  MIT Licensed, multiple contributors, simple structure
 // zstd https://github.com/facebook/zstd
 
 
 */
